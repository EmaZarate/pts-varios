// <auto-generated />
using System;
using Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Migrations
{
    [DbContext(typeof(SQLHoshinCoreContext))]
    [Migration("20191011142208_add field active in Users")]
    partial class addfieldactiveinUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Alert", b =>
                {
                    b.Property<int>("AlertID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlertType");

                    b.Property<string>("Description");

                    b.HasKey("AlertID");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.AlertRol", b =>
                {
                    b.Property<int>("AlertID");

                    b.Property<string>("RolID");

                    b.HasKey("AlertID", "RolID");

                    b.HasIndex("RolID");

                    b.ToTable("AlertRol");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.AlertUsers", b =>
                {
                    b.Property<int>("AlertUsersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertID");

                    b.Property<bool>("GenerateAlert");

                    b.Property<string>("UsersID");

                    b.HasKey("AlertUsersID");

                    b.HasIndex("AlertID");

                    b.HasIndex("UsersID");

                    b.ToTable("AlertUsers");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Companies", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BusinessName");

                    b.Property<string>("CUIT");

                    b.Property<string>("Logo");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Jobs", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("JobTitle");

                    b.HasKey("JobID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.JobsSectorsPlants", b =>
                {
                    b.Property<int>("JobID");

                    b.Property<int>("PlantID");

                    b.Property<int>("SectorID");

                    b.Property<int>("JobPlantSupID");

                    b.Property<int>("JobSectorSupID");

                    b.Property<int>("JobSupID");

                    b.HasKey("JobID", "PlantID", "SectorID");

                    b.HasIndex("PlantID", "SectorID");

                    b.ToTable("JobsSectorsPlants");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Plants", b =>
                {
                    b.Property<int>("PlantID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.HasKey("PlantID");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Aspects", b =>
                {
                    b.Property<int>("AspectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("StandardID");

                    b.Property<string>("Title");

                    b.HasKey("AspectID");

                    b.HasIndex("StandardID");

                    b.ToTable("Aspects");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AspectStates", b =>
                {
                    b.Property<int>("AspectStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Colour");

                    b.Property<string>("Name");

                    b.HasKey("AspectStateID");

                    b.ToTable("AspectStates");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditReschedulingHistory", b =>
                {
                    b.Property<int>("AuditReschedulingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditID");

                    b.Property<DateTime>("DateRescheduling");

                    b.HasKey("AuditReschedulingHistoryID");

                    b.HasIndex("AuditID");

                    b.ToTable("AuditReschedulingHistory");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Audits", b =>
                {
                    b.Property<int>("AuditID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovePlanComments");

                    b.Property<string>("ApproveReportComments");

                    b.Property<DateTime?>("AuditFinishDate");

                    b.Property<DateTime?>("AuditFinishTime");

                    b.Property<DateTime?>("AuditInitDate");

                    b.Property<DateTime?>("AuditInitTime");

                    b.Property<int>("AuditStateID");

                    b.Property<string>("AuditTeam");

                    b.Property<int>("AuditTypeID");

                    b.Property<string>("AuditorID");

                    b.Property<DateTime?>("CloseDate");

                    b.Property<DateTime?>("CloseMeetingDate");

                    b.Property<int?>("CloseMeetingDuration");

                    b.Property<string>("Conclusion");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DocumentAnalysisDuration");

                    b.Property<DateTime>("DocumentsAnalysisDate");

                    b.Property<string>("ExternalAuditor");

                    b.Property<int>("PlantID");

                    b.Property<string>("Recomendations");

                    b.Property<DateTime?>("ReportEmittedDate");

                    b.Property<int>("SectorID");

                    b.Property<string>("WorkflowId");

                    b.HasKey("AuditID");

                    b.HasIndex("AuditStateID");

                    b.HasIndex("AuditTypeID");

                    b.HasIndex("AuditorID");

                    b.HasIndex("PlantID", "SectorID");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandard", b =>
                {
                    b.Property<int>("AuditID");

                    b.Property<int>("StandardID");

                    b.HasKey("AuditID", "StandardID");

                    b.HasIndex("StandardID");

                    b.ToTable("AuditStandard");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandardAspect", b =>
                {
                    b.Property<int>("AspectID");

                    b.Property<int>("AuditID");

                    b.Property<int>("StandardID");

                    b.Property<int>("AspectStateID");

                    b.Property<string>("Description");

                    b.Property<bool>("NoAudited");

                    b.Property<bool>("WithoutFindings");

                    b.HasKey("AspectID", "AuditID", "StandardID");

                    b.HasIndex("AspectStateID");

                    b.HasIndex("AuditID", "StandardID");

                    b.ToTable("AuditStandardAspects");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStates", b =>
                {
                    b.Property<int>("AuditStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.HasKey("AuditStateID");

                    b.ToTable("AuditStates");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditsTypes", b =>
                {
                    b.Property<int>("AuditTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("AuditTypeID");

                    b.ToTable("AuditsTypes");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionEvidences", b =>
                {
                    b.Property<int>("CorrectiveActionEvidenceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectiveActionID");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("CorrectiveActionEvidenceID");

                    b.HasIndex("CorrectiveActionID");

                    b.ToTable("CorrectiveActionEvidences");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishbone", b =>
                {
                    b.Property<int>("CorrectiveActionID");

                    b.Property<int>("FishboneID");

                    b.HasKey("CorrectiveActionID", "FishboneID");

                    b.HasIndex("FishboneID");

                    b.ToTable("CorrectiveActionFishbone");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishboneCauses", b =>
                {
                    b.Property<int>("CorrectiveActionFishboneCauseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectiveActionID");

                    b.Property<int>("FishboneID");

                    b.Property<string>("Name");

                    b.Property<int>("X1");

                    b.Property<int>("X2");

                    b.Property<int>("Y1");

                    b.Property<int>("Y2");

                    b.HasKey("CorrectiveActionFishboneCauseID");

                    b.HasIndex("CorrectiveActionID", "FishboneID");

                    b.ToTable("CorrectiveActionFishboneCauses");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishboneCauseWhys", b =>
                {
                    b.Property<int>("CorrectiveActionFishboneCauseWhyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectiveActionFishboneCauseID");

                    b.Property<string>("Description");

                    b.Property<int>("Index");

                    b.Property<string>("SubChildren");

                    b.HasKey("CorrectiveActionFishboneCauseWhyID");

                    b.HasIndex("CorrectiveActionFishboneCauseID");

                    b.ToTable("CorrectiveActionFishboneCauseWhys");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", b =>
                {
                    b.Property<int>("CorrectiveActionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectiveActionStateID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DeadlineDateEvaluation");

                    b.Property<DateTime>("DeadlineDatePlanification");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EffectiveDateImplementation");

                    b.Property<string>("EmitterUserID");

                    b.Property<string>("EvaluationCommentary");

                    b.Property<int?>("FindingID");

                    b.Property<string>("ImmediateAction");

                    b.Property<string>("Impact");

                    b.Property<DateTime>("MaxDateEfficiencyEvaluation");

                    b.Property<DateTime>("MaxDateImplementation");

                    b.Property<int?>("PlantLocationID");

                    b.Property<int?>("PlantTreatmentID");

                    b.Property<string>("ResponsibleUserID");

                    b.Property<string>("ReviewerUserID");

                    b.Property<string>("RootReason");

                    b.Property<int?>("SectorLocationID");

                    b.Property<int?>("SectorTreatmentID");

                    b.Property<string>("WorkGroup");

                    b.Property<string>("WorkflowId");

                    b.Property<DateTime>("dateTimeEfficiencyEvaluation");

                    b.Property<bool>("isEffective");

                    b.HasKey("CorrectiveActionID");

                    b.HasIndex("CorrectiveActionStateID");

                    b.HasIndex("EmitterUserID");

                    b.HasIndex("FindingID")
                        .IsUnique()
                        .HasFilter("[FindingID] IS NOT NULL");

                    b.HasIndex("ResponsibleUserID");

                    b.HasIndex("ReviewerUserID");

                    b.HasIndex("PlantLocationID", "SectorLocationID");

                    b.HasIndex("PlantTreatmentID", "SectorTreatmentID");

                    b.ToTable("CorrectiveActions");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionStates", b =>
                {
                    b.Property<int>("CorrectiveActionStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.HasKey("CorrectiveActionStateID");

                    b.ToTable("CorrectiveActionStates");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionStatesHistory", b =>
                {
                    b.Property<int>("CorrectiveActionStatesHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectiveActionID");

                    b.Property<int>("CorrectiveActionStateID");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("Date");

                    b.HasKey("CorrectiveActionStatesHistoryID");

                    b.HasIndex("CorrectiveActionID");

                    b.ToTable("CorrectiveActionStatesHistory");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingComments", b =>
                {
                    b.Property<int>("FindingCommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FindingID");

                    b.HasKey("FindingCommentID");

                    b.HasIndex("FindingID");

                    b.ToTable("FindingComments");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", b =>
                {
                    b.Property<int>("FindingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AspectID");

                    b.Property<int?>("AuditID");

                    b.Property<string>("CauseAnalysis");

                    b.Property<string>("ContainmentAction");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EmitterUserID");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("FinalComment");

                    b.Property<int>("FindingStateID");

                    b.Property<int>("FindingTypeID");

                    b.Property<bool>("IsInProcessWorkflow");

                    b.Property<int?>("PlantLocationID");

                    b.Property<int?>("PlantTreatmentID");

                    b.Property<string>("ResponsibleUserID");

                    b.Property<int?>("SectorLocationID");

                    b.Property<int?>("SectorTreatmentID");

                    b.Property<int?>("StandardID");

                    b.Property<string>("WorkflowId");

                    b.HasKey("FindingID");

                    b.HasIndex("EmitterUserID");

                    b.HasIndex("FindingStateID");

                    b.HasIndex("FindingTypeID");

                    b.HasIndex("ResponsibleUserID");

                    b.HasIndex("PlantLocationID", "SectorLocationID");

                    b.HasIndex("PlantTreatmentID", "SectorTreatmentID");

                    b.HasIndex("AspectID", "AuditID", "StandardID");

                    b.ToTable("Findings");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsEvidences", b =>
                {
                    b.Property<int>("FindingEvidenceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FindingID");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("FindingEvidenceID");

                    b.HasIndex("FindingID");

                    b.ToTable("FindingsEvidences");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsReassignmentsHistory", b =>
                {
                    b.Property<int>("FindingReassignmentHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CauseOfReject");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FindingID");

                    b.Property<string>("ReassignedUserID");

                    b.Property<string>("State");

                    b.HasKey("FindingReassignmentHistoryID");

                    b.HasIndex("FindingID");

                    b.ToTable("FindingsReassignmentsHistories");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsStates", b =>
                {
                    b.Property<int>("FindingStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Colour");

                    b.Property<string>("Name");

                    b.HasKey("FindingStateID");

                    b.ToTable("FindingsStates");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsStatesHistory", b =>
                {
                    b.Property<int>("FindingStateHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FindingID");

                    b.Property<int>("FindingStateID");

                    b.HasKey("FindingStateHistoryID");

                    b.HasIndex("FindingID");

                    b.ToTable("FindingsStatesHistories");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingTypes", b =>
                {
                    b.Property<int>("FindingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("FindingTypeID");

                    b.ToTable("FindingTypes");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Fishbone", b =>
                {
                    b.Property<int>("FishboneID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.HasKey("FishboneID");

                    b.ToTable("Fishbone");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.ParametrizationCorrectiveActions", b =>
                {
                    b.Property<int>("ParametrizationCorrectiveActionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("Value");

                    b.HasKey("ParametrizationCorrectiveActionID");

                    b.ToTable("ParametrizationCorrectiveActions");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.ParametrizationCriterias", b =>
                {
                    b.Property<int>("ParametrizationCriteriaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType");

                    b.Property<string>("Name");

                    b.HasKey("ParametrizationCriteriaID");

                    b.ToTable("ParametrizationCriterias");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.ParametrizationsFindingTypes", b =>
                {
                    b.Property<int>("ParametrizationCriteriaID");

                    b.Property<int>("FindingTypeID");

                    b.Property<string>("Value");

                    b.HasKey("ParametrizationCriteriaID", "FindingTypeID");

                    b.HasIndex("FindingTypeID");

                    b.ToTable("ParametrizationsFindingTypes");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Standards", b =>
                {
                    b.Property<int>("StandardID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("StandardID");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.SupplierEvaluations", b =>
                {
                    b.Property<int>("SupplierEvaluationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FindingID");

                    b.HasKey("SupplierEvaluationID");

                    b.HasIndex("FindingID")
                        .IsUnique();

                    b.ToTable("SupplierEvaluations");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.TaskEvidences", b =>
                {
                    b.Property<int>("TaskEvidencesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TaskID");

                    b.Property<string>("Url");

                    b.HasKey("TaskEvidencesID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskEvidences");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Tasks", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("EntityID");

                    b.Property<int>("EntityType");

                    b.Property<DateTime?>("ImplementationEffectiveDate");

                    b.Property<DateTime>("ImplementationPlannedDate");

                    b.Property<string>("Observation");

                    b.Property<bool>("RequireEvidence");

                    b.Property<string>("ResponsibleUserID");

                    b.Property<string>("Result");

                    b.Property<int>("TaskStateID");

                    b.HasKey("TaskID");

                    b.HasIndex("ResponsibleUserID");

                    b.HasIndex("TaskStateID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.TaskStates", b =>
                {
                    b.Property<int>("TaskStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.HasKey("TaskStateID");

                    b.ToTable("TaskStates");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.UserCorrectiveAction", b =>
                {
                    b.Property<string>("UserID");

                    b.Property<int>("CorrectiveActionID");

                    b.HasKey("UserID", "CorrectiveActionID");

                    b.HasIndex("CorrectiveActionID");

                    b.ToTable("UserCorrectiveActions");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Roles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<bool>("Basic");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Sectors", b =>
                {
                    b.Property<int>("SectorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SectorID");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", b =>
                {
                    b.Property<int>("PlantID");

                    b.Property<int>("SectorID");

                    b.Property<int>("ReferringJob");

                    b.Property<int>("ReferringJob2");

                    b.HasKey("PlantID", "SectorID");

                    b.HasIndex("SectorID");

                    b.ToTable("SectorsPlants");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("ImageProfile");

                    b.Property<int>("JobID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MicrosoftGraphId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PlantID");

                    b.Property<int>("SectorID");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Status");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("base64Profile");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("JobID", "PlantID", "SectorID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.AlertRol", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Roles", "Rol")
                        .WithMany()
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.AlertUsers", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Alert", "Alert")
                        .WithMany("AlertUsers")
                        .HasForeignKey("AlertID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "Users")
                        .WithMany("AlertUsers")
                        .HasForeignKey("UsersID");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.JobsSectorsPlants", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Jobs", "Job")
                        .WithMany("JobsSectorsPlants")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlant")
                        .WithMany("JobsSectorsPlants")
                        .HasForeignKey("PlantID", "SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Aspects", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Standards", "Standard")
                        .WithMany("Aspects")
                        .HasForeignKey("StandardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditReschedulingHistory", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Audits")
                        .WithMany("AuditReschedulingHistories")
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Audits", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStates", "AuditState")
                        .WithMany()
                        .HasForeignKey("AuditStateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditsTypes", "AuditType")
                        .WithMany("Audits")
                        .HasForeignKey("AuditTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlant")
                        .WithMany("Audits")
                        .HasForeignKey("PlantID", "SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandard", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Audits", "Audit")
                        .WithMany("AuditStandards")
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Standards", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandardAspect", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Aspects", "Aspect")
                        .WithMany()
                        .HasForeignKey("AspectID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AspectStates", "AspectState")
                        .WithMany()
                        .HasForeignKey("AspectStateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandard", "AuditStandard")
                        .WithMany("AuditStandardAspects")
                        .HasForeignKey("AuditID", "StandardID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionEvidences", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", "CorrectiveAction")
                        .WithMany("Evidences")
                        .HasForeignKey("CorrectiveActionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishbone", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", "CorrectiveAction")
                        .WithMany("CorrectiveActionFishbones")
                        .HasForeignKey("CorrectiveActionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Fishbone", "Fishbone")
                        .WithMany()
                        .HasForeignKey("FishboneID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishboneCauses", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishbone", "CorrectiveActionFishbone")
                        .WithMany("CorrectiveActionFishboneCauses")
                        .HasForeignKey("CorrectiveActionID", "FishboneID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishboneCauseWhys", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionFishboneCauses", "CorrectiveActionFishboneCause")
                        .WithMany("CorrectiveActionFishboneCauseWhys")
                        .HasForeignKey("CorrectiveActionFishboneCauseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionStates", "CorrectiveActionState")
                        .WithMany()
                        .HasForeignKey("CorrectiveActionStateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "EmitterUser")
                        .WithMany()
                        .HasForeignKey("EmitterUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithOne("CorrectiveAction")
                        .HasForeignKey("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", "FindingID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "ResponisbleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "ReviewerUser")
                        .WithMany()
                        .HasForeignKey("ReviewerUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlantLocation")
                        .WithMany()
                        .HasForeignKey("PlantLocationID", "SectorLocationID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlantTreatment")
                        .WithMany()
                        .HasForeignKey("PlantTreatmentID", "SectorTreatmentID");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActionStatesHistory", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", "CorrectiveAction")
                        .WithMany("CorrectiveActionStatesHistory")
                        .HasForeignKey("CorrectiveActionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingComments", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithMany("FindingComments")
                        .HasForeignKey("FindingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "EmitterUser")
                        .WithMany("FindingEmitterUser")
                        .HasForeignKey("EmitterUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsStates", "FindingState")
                        .WithMany("Findings")
                        .HasForeignKey("FindingStateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingTypes", "FindingType")
                        .WithMany("Findings")
                        .HasForeignKey("FindingTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "ResponsibleUser")
                        .WithMany("FindingResponsibleUser")
                        .HasForeignKey("ResponsibleUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlantLocation")
                        .WithMany("FindingLocation")
                        .HasForeignKey("PlantLocationID", "SectorLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", "SectorPlantTreatment")
                        .WithMany("FindingTreatment")
                        .HasForeignKey("PlantTreatmentID", "SectorTreatmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.AuditStandardAspect", "AuditStandardAspect")
                        .WithMany("Findings")
                        .HasForeignKey("AspectID", "AuditID", "StandardID");
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsEvidences", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithMany("FindingsEvidences")
                        .HasForeignKey("FindingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsReassignmentsHistory", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithMany("FindingsReassignmentsHistory")
                        .HasForeignKey("FindingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingsStatesHistory", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithMany("FindingsStatesHistory")
                        .HasForeignKey("FindingID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.ParametrizationsFindingTypes", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.FindingTypes", "FindingType")
                        .WithMany("ParametrizationsFindingTypes")
                        .HasForeignKey("FindingTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.ParametrizationCriterias", "ParametrizationCriteria")
                        .WithMany("ParametrizationsFindingTypes")
                        .HasForeignKey("ParametrizationCriteriaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.SupplierEvaluations", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Findings", "Finding")
                        .WithOne("SupplierEvaluation")
                        .HasForeignKey("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.SupplierEvaluations", "FindingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.TaskEvidences", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Tasks", "Task")
                        .WithMany("TaskEvidences")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.Tasks", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserID");

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.TaskStates", "TaskState")
                        .WithMany()
                        .HasForeignKey("TaskStateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.UserCorrectiveAction", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Quality.CorrectiveActions", "CorrectiveActions")
                        .WithMany("UserCorrectiveActions")
                        .HasForeignKey("CorrectiveActionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "Users")
                        .WithMany("UserCorrectiveActions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.RoleClaim", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Roles", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.SectorsPlants", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Plants", "Plant")
                        .WithMany("SectorsPlants")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Sectors", "Sector")
                        .WithMany("SectorsPlants")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserClaim", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserLogin", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserRole", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.JobsSectorsPlants", "JobSectorPlant")
                        .WithMany("Users")
                        .HasForeignKey("JobID", "PlantID", "SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.UserToken", b =>
                {
                    b.HasOne("Hoshin.Core.Data.SQL.EntityFrameworkCoreDataAccess.SQLServer.Entities.Users", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
